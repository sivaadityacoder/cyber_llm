version: '3.8'

services:
  # Trendyol-Enhanced Backend Service
  trendyol-backend:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: trendyol-cybersecurity-backend
    ports:
      - "8000:8000"
    environment:
      - MODEL_NAME=trendyol-enhanced-ethical-hacker-llm-v4
      - MODEL_VERSION=4.0.0
      - TRAINING_DATA_PATH=/app/data/trendyol_integrated_training.json
      - PROFESSIONAL_GRADE=true
      - ENTERPRISE_READY=true
      - TRENDYOL_INTEGRATION=true
      - LOG_LEVEL=INFO
      - MAX_RESPONSE_LENGTH=2048
      - CONFIDENCE_THRESHOLD=0.7
      - SECURITY_DOMAINS=14
      - ADVANCED_FEATURES=true
    volumes:
      - ./data:/app/data:ro
      - ./model:/app/model:ro
      - ./logs:/app/logs
    networks:
      - trendyol-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      bash -c "
        echo 'üöÄ Starting Trendyol-Enhanced Cybersecurity Backend v4.0...' &&
        python -m uvicorn main_trendyol:app --host 0.0.0.0 --port 8000 --reload
      "

  # Trendyol-Enhanced Frontend Service
  trendyol-frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    container_name: trendyol-cybersecurity-frontend
    ports:
      - "8501:8501"
    environment:
      - BACKEND_URL=http://trendyol-backend:8000
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_THEME_BASE=light
      - STREAMLIT_THEME_PRIMARY_COLOR=#007bff
      - STREAMLIT_THEME_BACKGROUND_COLOR=#ffffff
      - STREAMLIT_THEME_SECONDARY_BACKGROUND_COLOR=#f8f9fa
      - PROFESSIONAL_MODE=true
      - ENTERPRISE_FEATURES=true
      - TRENDYOL_BRANDING=true
    depends_on:
      trendyol-backend:
        condition: service_healthy
    networks:
      - trendyol-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      bash -c "
        echo 'üé® Starting Trendyol-Enhanced Frontend Interface...' &&
        streamlit run streamlit_app_trendyol.py --server.port 8501 --server.address 0.0.0.0
      "

  # ChromaDB Vector Database for Advanced Features (Optional)
  trendyol-vectordb:
    image: chromadb/chroma:latest
    container_name: trendyol-vector-database
    ports:
      - "8002:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_PORT=8000
      - CHROMA_SERVER_HTTP_PORT=8000
      - ANONYMIZED_TELEMETRY=false
    volumes:
      - ./chroma_db:/chroma/chroma
      - chroma-data:/chroma/data
    networks:
      - trendyol-network
    restart: unless-stopped
    profiles:
      - advanced

  # Redis Cache for Performance (Optional)
  trendyol-cache:
    image: redis:7-alpine
    container_name: trendyol-redis-cache
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=trendyol_secure_cache_2024
    command: redis-server --requirepass trendyol_secure_cache_2024 --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - trendyol-network
    restart: unless-stopped
    profiles:
      - advanced

  # Professional Monitoring (Optional)
  trendyol-monitoring:
    image: prom/prometheus:latest
    container_name: trendyol-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - trendyol-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Professional Logging (Optional)
  trendyol-logging:
    image: grafana/grafana:latest
    container_name: trendyol-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=trendyol_admin_2024
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - trendyol-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Development Tools (Optional)
  trendyol-dev-tools:
    image: python:3.11-slim
    container_name: trendyol-dev-environment
    working_dir: /workspace
    environment:
      - PYTHONPATH=/workspace
      - DEV_MODE=true
      - TRENDYOL_DEV=true
    volumes:
      - .:/workspace
      - dev-cache:/root/.cache
    networks:
      - trendyol-network
    command: >
      bash -c "
        echo 'üõ†Ô∏è  Trendyol Development Environment Ready' &&
        pip install --upgrade pip &&
        pip install -r Backend/requirements.txt &&
        pip install jupyter ipython black flake8 pytest &&
        echo '‚úÖ Development tools installed' &&
        tail -f /dev/null
      "
    profiles:
      - development

# Networks
networks:
  trendyol-network:
    driver: bridge
    name: trendyol-cybersecurity-network

# Volumes for persistent data
volumes:
  chroma-data:
    name: trendyol-chroma-data
  redis-data:
    name: trendyol-redis-data
  prometheus-data:
    name: trendyol-prometheus-data
  grafana-data:
    name: trendyol-grafana-data
  dev-cache:
    name: trendyol-dev-cache

# Professional deployment configuration
# Usage Examples:
#
# Basic Professional Deployment:
#   docker-compose up trendyol-backend trendyol-frontend
#
# Full Advanced Features:
#   docker-compose --profile advanced up
#
# With Monitoring:
#   docker-compose --profile monitoring up
#
# Development Mode:
#   docker-compose --profile development up
#
# Complete Enterprise Stack:
#   docker-compose --profile advanced --profile monitoring --profile development up
#
# Production Deployment:
#   docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
